package com.app.Service;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.Custom_Exception.ResourceNotFoundException;
import com.app.Entities.User;
import com.app.Repository.UserRepository;
import com.app.User.dto.AuthResponseUserDTO;
import com.app.dto.AuthRequestUserDTO;

@Service
@Transactional
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userrepo;

	@Autowired
	private ModelMapper mapper;

	@Override
	public List<User> getAllUsers() {

		return userrepo.findAll();
	}

	@Override
	public User addUserDetails(AuthResponseUserDTO transientUser) {
		User u = mapper.map(transientUser, User.class);
		return userrepo.save(u);
	}

	@Override
	public User getUserbyid(int userid) {
		return userrepo.findById(userid)
				.orElseThrow(() -> new ResourceNotFoundException("Invalid User id, can't get User Details!!!"));
	}

	public AuthResponseUserDTO authenticateUser(AuthRequestUserDTO request) {
		User user = userrepo.findByEmailAndPassword(request.getEmail(), request.getPassword())
				.orElseThrow(() -> new ResourceNotFoundException("User not found : invalid email and password"));

		AuthResponseUserDTO authrespdto = mapper.map(user, AuthResponseUserDTO.class);
		return authrespdto;
	}

	@Override
	public String deleteUserDetails(int userid) {
		String msg = "User id is Invalid!, can't be deleted!";
		if (userrepo.existsById(userid)) {
			userrepo.deleteById(userid);
			msg = "User with id=" + userid + " deleted!";
		}
		return msg;
	}

	@Override
	public User updateUserdetails(User detachedUser) {
		int userid;
		String msg="User id is Invalid!, can't update the data!";
		  if(userrepo.existsById(detachedUser.getUserid())) { 
		  msg="User with id="+detachedUser.getUserid()+",Updated!"; 
		  }
		  return userrepo.save(detachedUser);
	}

	
	  
	  
	 

}
